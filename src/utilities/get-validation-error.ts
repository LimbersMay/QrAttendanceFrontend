import {TypeWithKey} from "../models";

export const getValidationError = (errorCode: string) => {
    const codeMatcher: TypeWithKey<string> = {
        ERR_NETWORK: 'NETWORK ERROR',
        INVALID_CREDENTIALS: 'INVALID CREDENTIALS',
        DUPLICATED_EMAIL: 'EMAIL ALREADY EXISTS',
        CANNOT_AUTHENTICATE_USER: 'CANNOT AUTHENTICATE USER',

        // User
        USER_NOT_FOUND: 'USER NOT FOUND',
        USER_CANNOT_BE_FOUND: 'USER CANNOT BE FOUND',
        USER_CANNOT_BE_DELETED: 'USER CANNOT BE DELETED',
        USER_CANNOT_BE_UPDATED: 'USER CANNOT BE UPDATED',
        USER_CANNOT_BE_CREATED: 'USER CANNOT BE CREATED',

        // Group
        GROUP_NOT_FOUND: 'GROUP NOT FOUND',
        GROUP_CANNOT_BE_FOUND: 'GROUP CANNOT BE FOUND',
        GROUP_CANNOT_BE_CREATED: 'GROUP CANNOT BE CREATED',
        GROUP_CANNOT_BE_DELETED: 'GROUP CANNOT BE DELETED',
        GROUP_CANNOT_BE_UPDATED: 'GROUP CANNOT BE UPDATED',

        // QrCode
        QR_CODE_NOT_FOUND: 'QR CODE NOTFOUND',
        QR_CODE_CANNOT_BE_FOUND: 'QR CODE CANOT BE_FOUND',
        QR_CODE_CANNOT_BE_CREATED: 'QR CODE CANOT BE_CREATED',
        QR_CODE_CANNOT_BE_DELETED: 'QR CODE CANOT BE_DELETED',
        QR_CODE_CANNOT_BE_UPDATED: 'QR CODE CANOT BE_UPDATED',

        // Registry
        REGISTRY_NOT_FOUND: 'REGISTRY NOT FOUND',
        REGISTRIES_NOT_FOUND: 'REGISTRIES NOT FOUND',
        REGISTRY_CANNOT_BE_FOUND: 'REGISTRY CANNOT BE FOUND',
        REGISTRY_CANNOT_BE_DELETED: 'REGISTRY CANNOT BE DELETED',
        REGISTRY_CANNOT_BE_UPDATED: 'REGISTRY CANNOT BE UPDATED',
        REGISTRY_CANNOT_BE_CREATED: 'REGISTRY CANNOT BE CREATED',
        REGISTRIES_CANNOT_BE_FOUND: 'REGISTRIES CANNOT BE FOUND',
    }

    return codeMatcher[errorCode] || "Something went wrong";
}